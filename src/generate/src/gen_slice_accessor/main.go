package main

import (
	"bytes"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"text/template"
)

func main() {
	arguments := newArgs(os.Args[1:]) // [0] is not args
	if !arguments.validate() {
		panic("invalid args")
	}
	doMain(arguments)
}

// 1. Handle request
// 2. Get ast and new field from src
// 3. Create output / resolve template

func doMain(arguments args) {

	// Ast
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, arguments.input, nil, parser.AllErrors)
	if err != nil {
		panic(err)
	}
	// if isDebug {
	// 	ast.Print(fset, node) // for debug
	// }

	// get package name
	pkgName := node.Name.Name

	// from stg ast to own Fields
	var fields Fields
	{
		objs := node.Scope.Objects
		obj, ok := objs[arguments.entity]
		if !ok {
			panic("not found entity")
		}

		decl := obj.Decl

		entity, ok := decl.(*ast.TypeSpec)
		if !ok {
			panic("invalid decl")
		}
		ty := entity.Type

		// https://stackoverflow.com/questions/20234342/get-a-simple-string-representation-of-a-struct-field-s-type
		sty, ok := ty.(*ast.StructType)
		if !ok {
			panic("invalid type")
		}
		rawFields := sty.Fields.List

		fields = newFields(rawFields)
		fields = fields.exclude(arguments.fieldNamesToExclude)
	}

	// Build generated code
	var txt string
	{
		// Append header
		txt += "// Code generated by go generate DO NOT EDIT.\n\n"
		txt += "package " + pkgName + "\n"

		// append templates
		{
			var doc bytes.Buffer
			tp, err := template.New("").Parse(templateBody)
			if err != nil {
				panic(err)
			}
			for _, f := range fields {
				data := &TemplateMapper{
					Slices: arguments.slice,
					Method: NewMethodName(f.Name),
					Type:   f.Type,
					Field:  f.Name,
				}

				err = tp.Execute(&doc, data)
				if err != nil {
					panic(err)
				}
			}
			txt += doc.String()
		}
	}

	// Write to output file
	write(arguments.output, txt)
}

// Write to output file
func write(path, txt string) {
	file, err := os.Create(path)
	if err != nil {
		panic(err)
	}
	defer file.Close()

	_, err = file.WriteString(txt)
	if err != nil {
		panic(err)
	}
}
