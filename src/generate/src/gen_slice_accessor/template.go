package main

import (
	"bytes"
	"text/template"
)

const templateBody = `
// {{ .Method }}
func (xs {{ .Slices }}) {{ .Method }}() []{{ .Type }} {
	sli := make([]{{ .Type }}, 0, len(xs))
	for i := range xs {
		sli = append(sli, xs[i].{{ .Field }})
	}
	return sli
}
`

// Replace variable from key to value in template.
type TemplateMapper struct {
	Slices string
	Method string
	Type   string
	Field  string
}

func generate(pkgName string, sliceName string, fields Fields) string {
	var txt string

	// Append header
	txt += "// Code generated by go generate DO NOT EDIT.\n\n"
	txt += "package " + pkgName + "\n"

	// append templates
	var doc bytes.Buffer
	tp, err := template.New("").Parse(templateBody)
	if err != nil {
		panic(err)
	}
	for _, f := range fields {
		data := &TemplateMapper{
			Slices: sliceName,
			Method: NewMethodName(f.Name),
			Type:   f.Type,
			Field:  f.Name,
		}

		err = tp.Execute(&doc, data)
		if err != nil {
			panic(err)
		}
	}
	txt += doc.String()
	return txt
}
